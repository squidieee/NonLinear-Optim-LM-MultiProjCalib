//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: JdXdfp.cpp
//
// MATLAB Coder version            : 2.8
// C/C++ source code generated on  : 25-Sep-2018 15:07:41
//

// Include Files
#include "rt_nonfinite.h"
#include "JdXdfp.h"
#include "rdivide.h"

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions

//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_powd_snf(double u0, double u1)
{
  double y;
  double d0;
  double d1;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = rtNaN;
  } else {
    d0 = fabs(u0);
    d1 = fabs(u1);
    if (rtIsInf(u1)) {
      if (d0 == 1.0) {
        y = rtNaN;
      } else if (d0 > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
      y = rtNaN;
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

//
// JDXDFP
//     JDXDFP = JDXDFP(FX_P,FY_P,CX_P,CY_P,R11,R21,R31,R12,R22,R32,R13,R23,R33,T1,T2,T3,S1,S2,S3,R,X1_P,X2_P)
// Arguments    : double fx_p
//                double fy_p
//                double cx_p
//                double cy_p
//                double r11
//                double r21
//                double r31
//                double r12
//                double r22
//                double r32
//                double r13
//                double r23
//                double r33
//                double t1
//                double t2
//                double t3
//                double s1
//                double s2
//                double s3
//                double r
//                double x1_p
//                double x2_p
//                double b_JdXdfp[6]
// Return Type  : void
//
void JdXdfp(double fx_p, double fy_p, double cx_p, double cy_p, double r11,
            double r21, double r31, double r12, double r22, double r32, double
            r13, double r23, double r33, double t1, double t2, double t3, double
            s1, double s2, double s3, double r, double x1_p, double x2_p, double
            b_JdXdfp[6])
{
  double t5;
  double t9;
  double t10;
  double t11;
  double t15;
  double t26;
  double t37;
  double t48;
  double t57;
  double t49;
  double t58;
  double t59;
  double t68;
  double t99;
  double t100;
  double t101;
  double t85;
  double t90;
  double t94;
  double t95;
  double t105;
  double t109;
  double t113;
  double t117;
  double t124;
  double t125;
  double t129;
  double t130;
  double t136;
  double t139;
  double t140;
  double t144;
  double t151;
  double t155;
  double t159;
  double t163;
  double t170;
  double t171;
  double t172;
  double t173;
  double t178;
  double t179;
  double t180;
  double t181;
  double t195;
  double t196;
  double t194;
  double t203;
  double t210;
  double t211;
  double t213;
  double x[6];
  int k;

  //     This function was generated by the Symbolic Math Toolbox version 6.2.
  //     11-Aug-2016 17:44:50
  t5 = ((((((((cy_p * fx_p * r11 * r32 - cy_p * fx_p * r12 * r31) - cx_p * fy_p *
              r21 * r32) + cx_p * fy_p * r22 * r31) + fx_p * fy_p * r11 * r22) -
           fx_p * fy_p * r12 * r21) - fx_p * r11 * r32 * x2_p) + fx_p * r12 *
         r31 * x2_p) + fy_p * r21 * r32 * x1_p) - fy_p * r22 * r31 * x1_p;
  t9 = ((((fx_p * fy_p * r11 * r22 * r33 + fx_p * fy_p * r12 * r23 * r31) + fx_p
          * fy_p * r13 * r21 * r32) - fx_p * fy_p * r11 * r23 * r32) - fx_p *
        fy_p * r12 * r21 * r33) - fx_p * fy_p * r13 * r22 * r31;
  t10 = rdivide(1.0, t9 * t9);
  t11 = ((((((((cy_p * fx_p * r11 * r33 - cy_p * fx_p * r13 * r31) - cx_p * fy_p
               * r21 * r33) + cx_p * fy_p * r23 * r31) + fx_p * fy_p * r11 * r23)
            - fx_p * fy_p * r13 * r21) - fx_p * r11 * r33 * x2_p) + fx_p * r13 *
          r31 * x2_p) + fy_p * r21 * r33 * x1_p) - fy_p * r23 * r31 * x1_p;
  t15 = ((((((((cy_p * fx_p * r12 * r33 - cy_p * fx_p * r13 * r32) - cx_p * fy_p
               * r22 * r33) + cx_p * fy_p * r23 * r32) + fx_p * fy_p * r12 * r23)
            - fx_p * fy_p * r13 * r22) - fx_p * r12 * r33 * x2_p) + fx_p * r13 *
          r32 * x2_p) + fy_p * r22 * r33 * x1_p) - fy_p * r23 * r32 * x1_p;
  t26 = t5 * t5;
  t37 = t11 * t11;
  t48 = t15 * t15;
  t57 = rdivide(1.0, ((((r11 * r22 * r33 - r11 * r23 * r32) - r12 * r21 * r33) +
                       r12 * r23 * r31) + r13 * r21 * r32) - r13 * r22 * r31);
  t49 = s3 + t57 * (((((r11 * r22 * t3 - r12 * r21 * t3) - r11 * r32 * t2) + r12
                      * r31 * t2) + r21 * r32 * t1) - r22 * r31 * t1);
  t58 = s2 - t57 * (((((r11 * r23 * t3 - r13 * r21 * t3) - r11 * r33 * t2) + r13
                      * r31 * t2) + r21 * r33 * t1) - r23 * r31 * t1);
  t59 = s1 + t57 * (((((r12 * r23 * t3 - r13 * r22 * t3) - r12 * r33 * t2) + r13
                      * r32 * t2) + r22 * r33 * t1) - r23 * r32 * t1);
  t68 = rdivide(1.0, t9);
  t99 = t5 * t49 * t68 * 2.0;
  t100 = t11 * t58 * t68 * 2.0;
  t101 = t15 * t59 * t68 * 2.0;
  t85 = (t99 - t100) + t101;
  t90 = ((t49 * t49 + t58 * t58) + t59 * t59) - r * r;
  t94 = ((((fy_p * r11 * r22 * r33 + fy_p * r12 * r23 * r31) + fy_p * r13 * r21 *
           r32) - fy_p * r11 * r23 * r32) - fy_p * r12 * r21 * r33) - fy_p * r13
    * r22 * r31;
  t95 = rdivide(1.0, rt_powd_snf(t9, 3.0));
  t105 = ((((cy_p * r11 * r32 + fy_p * r11 * r22) + r12 * r31 * x2_p) - cy_p *
           r12 * r31) - fy_p * r12 * r21) - r11 * r32 * x2_p;
  t109 = ((((cy_p * r11 * r33 + fy_p * r11 * r23) + r13 * r31 * x2_p) - cy_p *
           r13 * r31) - fy_p * r13 * r21) - r11 * r33 * x2_p;
  t113 = ((((cy_p * r12 * r33 + fy_p * r12 * r23) + r13 * r32 * x2_p) - cy_p *
           r13 * r32) - fy_p * r13 * r22) - r12 * r33 * x2_p;
  t117 = t49 * t68 * t105 * 2.0;
  t124 = t59 * t68 * t113 * 2.0;
  t125 = t10 * t11 * t58 * t94 * 2.0;
  t129 = (t10 * t26 + t10 * t37) + t10 * t48;
  t130 = rdivide(1.0, t129);
  t136 = t85 * t85 - t90 * ((t10 * t26 * 4.0 + t10 * t37 * 4.0) + t10 * t48 *
    4.0);
  t139 = ((t99 - t100) + t101) + sqrt(t136);
  t140 = rdivide(1.0, sqrt(t136));
  t144 = ((((fx_p * r11 * r22 * r33 + fx_p * r12 * r23 * r31) + fx_p * r13 * r21
            * r32) - fx_p * r11 * r23 * r32) - fx_p * r12 * r21 * r33) - fx_p *
    r13 * r22 * r31;
  t151 = ((((cx_p * r21 * r32 + fx_p * r12 * r21) + r22 * r31 * x1_p) - cx_p *
           r22 * r31) - fx_p * r11 * r22) - r21 * r32 * x1_p;
  t155 = ((((cx_p * r21 * r33 + fx_p * r13 * r21) + r23 * r31 * x1_p) - cx_p *
           r23 * r31) - fx_p * r11 * r23) - r21 * r33 * x1_p;
  t159 = ((((cx_p * r22 * r33 + fx_p * r13 * r22) + r23 * r32 * x1_p) - cx_p *
           r23 * r32) - fx_p * r12 * r23) - r22 * r33 * x1_p;
  t163 = t49 * t68 * t151 * 2.0;
  t170 = t59 * t68 * t159 * 2.0;
  t171 = t5 * t10 * t49 * t144 * 2.0;
  t172 = t10 * t15 * t59 * t144 * 2.0;
  t173 = rdivide(1.0, t129 * t129);
  t178 = t90 * (((((t5 * t10 * t105 * 8.0 + t10 * t11 * t109 * 8.0) + t10 * t15 *
                   t113 * 8.0) - t26 * t94 * t95 * 8.0) - t37 * t94 * t95 * 8.0)
                - t48 * t94 * t95 * 8.0);
  t179 = t58 * t68 * t109 * 2.0;
  t180 = t5 * t10 * t49 * t94 * 2.0;
  t181 = t10 * t15 * t59 * t94 * 2.0;
  t195 = t58 * t68 * t155 * 2.0;
  t196 = t10 * t11 * t58 * t144 * 2.0;
  t194 = t90 * (((((t26 * t95 * t144 * 8.0 + t37 * t95 * t144 * 8.0) + t48 * t95
                   * t144 * 8.0) + t5 * t10 * t151 * 8.0) + t10 * t11 * t155 *
                 8.0) + t10 * t15 * t159 * 8.0) - t85 * (((((t163 + t170) + t171)
    + t172) - t195) - t196) * 2.0;
  t203 = ((((t26 * t95 * t144 * 2.0 + t37 * t95 * t144 * 2.0) + t48 * t95 * t144
            * 2.0) + t5 * t10 * t151 * 2.0) + t10 * t11 * t155 * 2.0) + t10 *
    t15 * t159 * 2.0;
  t210 = (((((-t117 - t124) - t125) + t179) + t180) + t181) + t140 * (t178 - t85
    * (((((t117 + t124) + t125) - t179) - t180) - t181) * 2.0) * rdivide(1.0,
    2.0);
  t211 = ((((t5 * t10 * t105 * 2.0 + t10 * t11 * t109 * 2.0) + t10 * t15 * t113 *
            2.0) - t26 * t94 * t95 * 2.0) - t37 * t94 * t95 * 2.0) - t48 * t94 *
    t95 * 2.0;
  t213 = (((((t163 + t170) + t171) + t172) - t195) - t196) - t140 * t194 *
    rdivide(1.0, 2.0);
  x[0] = ((t68 * t113 * t130 * t139 * rdivide(1.0, 2.0) - t15 * t68 * t130 *
           ((((((-t117 - t124) - t125) + t179) + t180) + t181) + t140 * (t178 -
             t85 * (((((t117 + t124) + t125) - t58 * t68 * t109 * 2.0) - t5 *
                     t10 * t49 * t94 * 2.0) - t10 * t15 * t59 * t94 * 2.0) * 2.0)
            * rdivide(1.0, 2.0)) * rdivide(1.0, 2.0)) - t10 * t15 * t94 * t130 *
          t139 * rdivide(1.0, 2.0)) - t15 * t68 * t139 * t173 * t211 * rdivide
    (1.0, 2.0);
  x[1] = ((t11 * t68 * t130 * t210 * rdivide(1.0, 2.0) - t68 * t109 * t130 *
           t139 * rdivide(1.0, 2.0)) + t10 * t11 * t94 * t130 * t139 * rdivide
          (1.0, 2.0)) + t11 * t68 * t139 * t173 * t211 * rdivide(1.0, 2.0);
  x[2] = ((t5 * t68 * t130 * t210 * rdivide(-1.0, 2.0) + t68 * t105 * t130 *
           t139 * rdivide(1.0, 2.0)) - t5 * t10 * t94 * t130 * t139 * rdivide
          (1.0, 2.0)) - t5 * t68 * t139 * t173 * t211 * rdivide(1.0, 2.0);
  x[3] = ((t15 * t68 * t130 * ((((((t163 + t170) + t171) + t172) - t140 * t194 *
              rdivide(1.0, 2.0)) - t58 * t68 * t155 * 2.0) - t10 * t11 * t58 *
            t144 * 2.0) * rdivide(-1.0, 2.0) - t68 * t130 * t139 * t159 *
           rdivide(1.0, 2.0)) - t10 * t15 * t130 * t139 * t144 * rdivide(1.0,
           2.0)) + t15 * t68 * t139 * t173 * t203 * rdivide(1.0, 2.0);
  x[4] = ((t11 * t68 * t130 * t213 * rdivide(1.0, 2.0) + t68 * t130 * t139 *
           t155 * rdivide(1.0, 2.0)) + t10 * t11 * t130 * t139 * t144 * rdivide
          (1.0, 2.0)) - t11 * t68 * t139 * t173 * t203 * rdivide(1.0, 2.0);
  x[5] = ((t5 * t68 * t130 * t213 * rdivide(-1.0, 2.0) - t68 * t130 * t139 *
           t151 * rdivide(1.0, 2.0)) - t5 * t10 * t130 * t139 * t144 * rdivide
          (1.0, 2.0)) + t5 * t68 * t139 * t173 * t203 * rdivide(1.0, 2.0);
  for (k = 0; k < 6; k++) {
    b_JdXdfp[k] = x[k];
  }
}

//
// File trailer for JdXdfp.cpp
//
// [EOF]
//
