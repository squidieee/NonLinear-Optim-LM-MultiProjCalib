//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: JdxdX.cpp
//
// MATLAB Coder version            : 2.8
// C/C++ source code generated on  : 25-Sep-2018 16:02:46
//

// Include Files
#include "rt_nonfinite.h"
#include "func_FC.h"
#include "JdxdX.h"
#include "JdXdR.h"
#include "func_FC_rtwutil.h"

// Function Definitions

//
// JDXDX
//     JDXDX = JDXDX(X1,X2,X3,FX_C,FY_C,CX_C,CY_C,KC1,KC2,KC3,PC1,PC2)
// Arguments    : double X1
//                double X2
//                double X3
//                double fx_c
//                double fy_c
//                double kc1
//                double kc2
//                double kc3
//                double pc1
//                double pc2
//                double b_JdxdX[6]
// Return Type  : void
//
void JdxdX(double X1, double X2, double X3, double fx_c, double fy_c, double kc1,
           double kc2, double kc3, double pc1, double pc2, double b_JdxdX[6])
{
  double t2;
  double t4;
  double t6;
  double t3;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t17;
  double t21;
  double t22;
  double t23;
  double t24;
  double t28;
  double t32;
  double x[6];
  int k;

  //     This function was generated by the Symbolic Math Toolbox version 6.2.
  //     11-Aug-2016 17:44:09
  t2 = 1.0 / (X3 * X3);
  t4 = X1 * X1;
  t6 = X2 * X2;
  t3 = t2 * t4 + t2 * t6;
  t8 = t3 * t3;
  t9 = 1.0 / X3;
  t10 = 1.0 / rt_powd_snf(X3, 3.0);
  t11 = t6 * t10 * 2.0;
  t12 = t4 * t10 * 2.0;
  t13 = t11 + t12;
  t17 = ((kc2 * t8 + kc3 * t3 * t8) + kc1 * t3) + 1.0;
  t21 = (X1 * kc1 * t2 * 2.0 + X1 * kc3 * t2 * t8 * 6.0) + X1 * kc2 * t2 * t3 *
    4.0;
  t22 = X1 * pc1 * t2 * 2.0;
  t23 = X2 * pc2 * t2 * 2.0;
  t24 = t9 * t17;
  t28 = (X2 * kc1 * t2 * 2.0 + X2 * kc3 * t2 * t8 * 6.0) + X2 * kc2 * t2 * t3 *
    4.0;
  t32 = (kc1 * t13 + kc3 * t8 * t13 * 3.0) + kc2 * t3 * t13 * 2.0;
  x[0] = fx_c * (((t24 + X1 * pc2 * t2 * 6.0) + X2 * pc1 * t2 * 2.0) + X1 * t9 *
                 t21);
  x[1] = fy_c * ((t22 + t23) + X2 * t9 * t21);
  x[2] = fx_c * ((t22 + t23) + X1 * t9 * t28);
  x[3] = fy_c * (((t24 + X1 * pc2 * t2 * 2.0) + X2 * pc1 * t2 * 6.0) + X2 * t9 *
                 t28);
  x[4] = -fx_c * (((pc2 * (t11 + t4 * t10 * 6.0) + X1 * t2 * t17) + X1 * t9 *
                   t32) + X1 * X2 * pc1 * t10 * 4.0);
  x[5] = -fy_c * (((pc1 * (t12 + t6 * t10 * 6.0) + X2 * t2 * t17) + X2 * t9 *
                   t32) + X1 * X2 * pc2 * t10 * 4.0);
  for (k = 0; k < 6; k++) {
    b_JdxdX[k] = x[k];
  }
}

//
// File trailer for JdxdX.cpp
//
// [EOF]
//
